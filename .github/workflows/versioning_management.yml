name: Versioning and Release Management
on:
  push:
    branches:
      - main
    tags:
      - '\d+\.\d+(\.\d+)?((a|b|rc)\d+)?(\.post\d+)?(\.dev\d+)?'
        # e.g. 1.1, 1.1.1, 1.1.1a1, 1.1.1rc1.post1, 1.1.1a1.dev1
  pull_request:
    types: [closed]
    branches:
      - main
  workflow_dispatch:

jobs:
  versioning:
    if: github.event.pull_request.merged == true || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
    - name: Check out the code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Upgrade pip
      run: python -m pip install --upgrade pip    

    - name: Install dependencies
      run: pip install setuptools_scm auto-changelog

    - name: Compute version and tag
      id: scm_version
      run: |
        COMPUTE_VERSION=$(python -c 'import setuptools_scm; print(setuptools_scm.get_version())')
        echo "COMPUTE_VERSION=$COMPUTE_VERSION" >> $GITHUB_ENV
        echo "GIT_TAG=$COMPUTE_VERSION" >> $GITHUB_ENV

    - name: Check version format
      id: check_version_format
      run: |
        regex='^\d+\.\d+(\.\d+)?((a|b|rc)\d+)?(\.post\d+)?(\.dev\d+)?$'
        if echo "${{ env.COMPUTE_VERSION }}" | grep -qE "$regex"; then
          echo "VERSION_FORMAT_OK=true" >> $GITHUB_ENV
        else
          echo "VERSION_FORMAT_OK=false" >> $GITHUB_ENV
        fi
      
    - name: Generate Changelog
      if: env.VERSION_FORMAT_OK == 'true' && github.ref == 'refs/heads/main'
      run: auto-changelog --output CHANGELOG.md

    - name: Create Release Draft
      if: env.VERSION_FORMAT_OK == 'true' && github.ref == 'refs/heads/main'
      id: create_release_draft
      uses: release-drafter/release-drafter@v5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Push Changelog and Tags
      if: >-
        env.VERSION_FORMAT_OK == 'true' && 
        github.ref == 'refs/heads/main' && 
        steps.create_release_draft.outputs.draft == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add CHANGELOG.md
        git commit -m "Update CHANGELOG.md for version ${{ env.COMPUTE_VERSION }}"
        git tag ${{ env.GIT_TAG }} ${{ github.sha }}
        git push origin ${{ env.GIT_TAG }}
        git push origin main

    # Release Drafter creates or updates the draft release notes
    - name: Draft Release Notes
      if: >-
        env.VERSION_FORMAT_OK == 'true' && 
        github.event_name == 'pull_request' && 
        github.event.action == 'closed' && 
        github.event.pull_request.merged == true
      uses: release-drafter/release-drafter@v5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
